openapi: 3.0.1
info:
  title: NexusDhaam API
  description: |
    OpenAPI 3.0 specification for the NexusDhaam product. Provides endpoints under `/api/v1/orders`.
  version: 1.0.0
servers:
  - url: https://{{environment}}.api.nexusdhaam.com
    description: API server with selectable environment
    variables:
      environment:
        enum: [prod, test, staging]
        default: prod
security:
  - bearerAuth: []
  - apiKeyAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  parameters:
    AcceptLanguageHeader:
      name: Accept-Language
      in: header
      description: Language preference (e.g., en, fr, es)
      required: false
      schema:
        type: string
        enum: [en, fr, es]
        default: en
  schemas:
    TestRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email
        age:
          type: integer
          minimum: 18
          maximum: 120
        phone:
          type: string
          pattern: '^+?[1-9]\d{1,14}$'
        website:
          type: string
          format: uri
        language:
          type: string
          enum: [en, es, fr, de, it]
      required: [name, email, age, language]

    HealthStatus:
      type: object
      properties:
        status:
          type: string
        timestamp:
          type: string
          format: date-time
        database:
          type: string
      required: [status, timestamp, database]

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          oneOf:
            - $ref: '#/components/schemas/HealthStatus'
            - $ref: '#/components/schemas/ListOrdersResponse'
            - $ref: '#/components/schemas/QuoteResponse'
            - $ref: '#/components/schemas/CreateOrderResponse'
            - $ref: '#/components/schemas/OrderDetailRes'
            - $ref: '#/components/schemas/UpdateOrderResponse'
        meta:
          type: object
          properties:
            timestamp:
              type: string
              format: date-time
            request_id:
              type: string
            total_count:
              type: integer
      required: [success, data, meta]

    OrderFilters:
      type: object
      properties:
        platform_used:
          type: array
          items:
            type: integer
          description: If this filter is applied, only orders placed using the specified platforms will be returned.
        delivery_mode:
          type: array
          items:
            type: integer
          description: Filters the results to include only orders that match the selected delivery modes.
        payment_mode:
          type: array
          items:
            type: integer
          description: Returns only those orders where the payment was made using the selected modes.
        order_type:
          type: array
          items:
            type: integer
          description: If used, this filter will return only orders that belong to the selected order types.
        store_ids:
          type: array
          items:
            type: integer
          description: Filters orders based on the provided store IDs—only orders from these stores will be shown.
        status:
          type: integer
        description: Filters the data to include only orders that match the specified order status.
        search_text:
          type: string
        description: If a keyword is provided, it will return orders matching that text in order ID.

    OrderSort:
      type: object
      properties:
        sort_by:
          type: string
          description: Field by which the orders should be sorted.
        sort_order:
          type: integer
          description: Defines the sort direction — use `1` for ascending and `-1` for descending order.

    GetOrdersRequest:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
          description: The start date and time of the range for which orders should be fetched.
        end_time:
          type: string
          format: date-time
          description: The end date and time of the range for which orders should be fetched.
        limit:
          type: integer
          description: The maximum number of orders to return per page.
        current_page:
          type: integer
          description: The current page number for pagination.
        previous_page:
          type: integer
          description: The previous page number (used for backward pagination or state tracking).
        filters:
          $ref: '#/components/schemas/OrderFilters'
          description: Filters to narrow down the order search results based on status, store, platform, etc.
        sort:
          $ref: '#/components/schemas/OrderSort'
          description: Sorting rules for ordering the returned orders.
      required: [start_time, end_time, limit]
    
    Store:
      type: object
      properties:
        id:
          type: integer
        store_name:
          type: string
        phone_number:
          type: string
        email:
          type: string
        country_code:
          type: string
        admin_comission:
          type: number
        merchant_comission:
          type: number
        storeRating:
          type: number
          format: float

    OrderResp:
      type: object
      properties:
        order_type:
          type: integer
        order_id:
          type: string
        placed_at:
          type: string
          format: date-time
        order_status:
          type: integer
        avg_rating:
          type: number
          format: float
        customer_notes:
          type: string
        order_status_name:
          type: string
        customer_id:
          type: integer
        customer_name:
          type: string
        total_amount:
          type: number
          format: float
        id:
          type: string
        payment_mode:
          type: integer
        payment_mode_name:
          type: string
        delivery_address:
          type: string
        schedule_time:
          type: string
          format: date-time
        order_prep_time:
          type: integer
        delivery_time:
          type: integer
        store_id:
          type: integer
        store_name:
          type: string
        order_source:
          type: integer
        order_source_name:
          type: string
        delivery_mode:
          type: integer
        delivery_mode_name:
          type: string
        store:
          $ref: '#/components/schemas/Store'

    ListOrdersResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderResp'
        order_count:
          type: object
          additionalProperties:
            type: integer

    CreateOrderRequest:
      type: object
      properties:
        quotation_id:
          type: string
          format: uuid
          description: The unique ID of the quotation which is generated in upsert quote, based on which the order will be created. This is required to validate pricing, customer, and store details.
      required: [quotation_id]

    CreateOrderResponse:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/OrderResp'
        estimated_delivery:
          type: string
          format: date-time
          example: 2025-06-27T10:57:29.9006848+05:30
        order_mode:
          type: string
          example: SCHEDULED
        tracking_url:
          type: string
          format: uri
          example: https://example.com/track/ace1f5ac-c410-4c20-9221-4031e21d4800
        next_steps:
          $ref: '#/components/schemas/NextSteps'

    NextSteps:
      type: object
      properties:
        payment_url:
          type: string
          format: uri
        estimated_preparation_time_mins:
          type: integer
        estimated_delivery_time_mins:
          type: integer

    QuoteRequest:
      type: object
      properties:
        quotation_id:
          type: string
          format: uuid
          description: Unique identifier for the quotation (used for updates or validations).
        customer_id:
          type: integer
          description: ID of the customer placing the order.
        address:
          type: string
          description: Delivery address for the order.
        latitude:
          type: number
          description: Latitude of the delivery location.
        longitude:
          type: number
          description: Longitude of the delivery location.
        delivery_mode:
          type: integer
          description: Mode of delivery.
        order_mode:
          type: integer
          description: Type of order.
        scheduled_for:
          type: string
          format: date-time
          description: Date and time for which the order is scheduled, if applicable.
        payment_via:
          type: integer
          description: Type of payment modes.
        wallet_money:
          type: number
          description: Amount to be used from wallet balance.
        loyalty_points:
          type: integer
          description: Loyalty points the customer wants to redeem.
        store_id:
          type: integer
          description: ID of the store from which the order is being placed.
        items:
          type: array
          description: List of items in the order with quantity and total pricing.
          items:
            type: object
            properties:
              item_id:
                type: integer
                description: ID of the item being ordered.
              quantity:
                type: integer
                description: Number of units ordered.
              total_amount:
                type: number
                description: Total price for the item (quantity × price).
        flat_discount:
          type: number
          description: Flat discount amount applied to the order.
        tips:
          type: number
          description: Tip amount added by the customer.
        promo_code:
          type: string
          description: Promotional code applied to the order.
        notes:
          type: string
          description: Special instructions or notes from the customer.
        utensils:
          type: object
          description: Optional request for carry bag or cutlery.
          properties:
            send_cutlery:
              type: boolean
              description: Whether the customer wants cutlery to be included.
            carry_bag:
              type: boolean
              description: Whether the customer wants a carry bag included.
        expires_at:
          type: string
          format: date-time
          description: The expiry time for the quotation. After this time, the quotation is considered invalid.

    QuoteResponse:
      type: object
      properties:
        order:
          type: object
          items:
            $ref: '#/components/schemas/OrderResp'
        quotation_id:
          type: string
        customer_id:
          type: integer
        store_id:
          type: integer
        breakdown:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        is_used:
          type: boolean

    OrderItemRes:
      type: object
      properties:
        order_item_id:
          type: integer
        item_id:
          type: string
        quantity:
          type: integer
        mrp:
          type: number
        amount:
          type: number
        total_amount:
          type: number
        tax_amount:
          type: number
        discount_amount:
          type: number
        inventory_enabled:
          type: boolean
        notes:
          type: string
    
    Prices:
      type: object
      properties:
        grand_total:
          type: number
          format: float
        item_total:
          type: number
          format: float
        total_tax:
          type: number
          format: float
        gst:
          type: number
          format: float
        processing_fees:
          type: number
          format: float
        platform_fees:
          type: number
          format: float
        delivery_charges:
          type: number
          format: float

    EventsRes:
      type: object
      properties:
        event_id:
          type: integer
        order_id:
          type: integer
        status:
          type: string
        changed_by:
          type: integer
        actor_type:
          type: string
        update_source_id:
          type: integer
        changed_at:
          type: string
          format: date-time
        note:
          type: string
        is_active:
          type: boolean

    OrderDetailRes:
      type: object
      properties:
        order:
          type: object
          items:
            $ref: '#/components/schemas/OrderResp'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRes'
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventsRes'
        prices:
          type: object
          items:
            $ref: '#/components/schemas/Prices'

    UpdateOrderRequest:
      type: object
      properties:
        status:
          type: integer
          description: New status of the order
        refund_amount:
          type: number
          description: Amount to refund, if applicable
        metadata:
          type: object
          additionalProperties: true
          description: Optional metadata as key-value pairs.  
            - If status is `9` (cancelled), then `reason` (string) must be provided in metadata.  
            - If order is being marked ready or similar, `prep_time` (integer in minutes) may also be included.
            - If the `status` is being changed, you **must** also include a `status_description` (string) in metadata, 
              which will be used as the note in the order event log.
    UpdateOrderResponse:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            order_id:
              type: string

paths:
  /api/v1/orders/health:
    post:
      summary: Check API health status
      operationId: checkHealth
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRequest'
      responses:
        '200': { description: Successful health check, content: { application/json: { schema: { $ref: '#/components/schemas/ApiResponse' } } } }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Internal server error }

  /quote:
    post:
      summary: Create or update a quote
      operationId: upsertQuote
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequest'
      responses:
        '200': { description: Quote created or updated, content: { application/json: { schema: { $ref: '#/components/schemas/ApiResponse' } } } }
        '400': { description: Invalid request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /list:
    post:
      summary: List orders
      operationId: listOrders
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOrdersRequest'
      responses:
        '200': { description: A list of orders and their summary, content: { application/json: { schema: { $ref: '#/components/schemas/ApiResponse' } } } }
        '400': { description: Invalid request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /create:
    post:
      summary: Create a new order
      operationId: createOrder
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200': { description: Order created successfully, content: { application/json: { schema: { $ref: '#/components/schemas/ApiResponse' } } } }
        '400': { description: Invalid request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /{id}:
    get:
      summary: Get order details
      operationId: getOrderDetail
      tags: [Orders]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique order ID. This ID can be obtained from the order listing API (`id` field).
        
        - in: query
          name: field
          required: false
          schema:
            type: string
          description: >
            Optional field to filter the response content. Comma-separated values allowed.
            - `item` – Returns only order items.
            - `price` – Returns only pricing details.
            - `item,price` – Returns both items and price.
            If omitted, the full order detail is returned including items, price, events, and metadata.
      responses:
        '200': { description: Order details, content: { application/json: { schema: { $ref: '#/components/schemas/ApiResponse' } } } }
        '404': { description: Order not found }
        '400': { description: Invalid ID supplied }
        '401': { description: Unauthorized }

    post:
      summary: Update order
      operationId: updateOrder
      tags: [Orders]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique order ID. This ID can be obtained from the order listing API or order detail api (`id` field).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200': { description: Order updated successfully, content: { application/json: { schema: { $ref: '#/components/schemas/ApiResponse' } } } }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
        '404': { description: Order not found }
        '500': { description: Server error }
