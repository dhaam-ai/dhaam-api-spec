openapi: 3.0.1
info:
  title: NexusDhaam API
  description: |
    OpenAPI 3.0 specification for the NexusDhaam product. Provides endpoints under `/api/v1/orders`.
  version: 1.0.0
servers:
  - url: https://{{environment}}.api.nexusdhaam.com
    description: API server with selectable environment
    variables:
      environment:
        enum: [prod, test, staging]
        default: prod
security:
  - bearerAuth: []
  - apiKeyAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    TestRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email
        age:
          type: integer
          minimum: 18
          maximum: 120
        phone:
          type: string
          pattern: '^+?[1-9]\d{1,14}$'
        website:
          type: string
          format: uri
        language:
          type: string
          enum: [en, es, fr, de, it]
      required: [name, email, age, language]

    HealthStatus:
      type: object
      properties:
        status:
          type: string
        timestamp:
          type: string
          format: date-time
        database:
          type: string
      required: [status, timestamp, database]

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          oneOf:
            - $ref: '#/components/schemas/HealthStatus'
            - $ref: '#/components/schemas/ListOrdersResponse'
            - $ref: '#/components/schemas/QuoteResponse'
            - $ref: '#/components/schemas/CreateOrderResponse'
            - $ref: '#/components/schemas/OrderDetailRes'
            - $ref: '#/components/schemas/UpdateOrderResponse'
        meta:
          type: object
          properties:
            timestamp:
              type: string
              format: date-time
            request_id:
              type: string
            total_count:
              type: integer
      required: [success, data, meta]

    OrderFilters:
      type: object
      properties:
        platform_used:
          type: array
          items:
            type: integer
        delivery_mode:
          type: array
          items:
            type: integer
        order_type:
          type: array
          items:
            type: integer
        store_ids:
          type: array
          items:
            type: integer
        status:
          type: integer
        search_text:
          type: string

    OrderSort:
      type: object
      properties:
        sort_by:
          type: string
        sort_order:
          type: integer

    GetOrdersRequest:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        next_iteration_id:
          type: string
        limit:
          type: integer
        filters:
          $ref: '#/components/schemas/OrderFilters'
        sort:
          $ref: '#/components/schemas/OrderSort'
      required: [start_time, end_time, limit]

    OrderResp:
      type: object
      properties:
        order_type:
          type: integer
        order_id:
          type: string
        placed_at:
          type: string
          format: date-time
        order_status:
          type: integer
        order_status_name:
          type: string
        customer_id:
          type: integer
        customer_name:
          type: string
        total_amount:
          type: number
          format: float
        id:
          type: string
        payment_mode:
          type: integer
        payment_mode_name:
          type: string
        delivery_address:
          type: string
        schedule_time:
          type: string
          format: date-time
        order_prep_time:
          type: integer
        delivery_time:
          type: integer
        store_id:
          type: integer
        store_name:
          type: string
        order_source:
          type: integer
        order_source_name:
          type: string
        delivery_mode:
          type: integer
        delivery_mode_name:
          type: string

    ListOrdersResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderResp'
        order_count:
          type: object
          additionalProperties:
            type: integer

    CreateOrderRequest:
      type: object
      properties:
        quotation_id:
          type: string
          format: uuid
      required: [quotation_id]

    CreateOrderResponse:
      type: object
      properties:
        status:
          type: string
        order_id:
          type: integer
        tracking_url:
          type: string
          format: uri
        estimated_delivery:
          type: string
          format: date-time
        order_details:
          $ref: '#/components/schemas/OrderDetails'
        next_steps:
          $ref: '#/components/schemas/NextSteps'

    OrderDetails:
      type: object
      properties:
        status:
          type: string
        delivery_mode:
          type: string
        order_mode:
          type: string
        scheduled_for:
          type: string
          format: date-time
          nullable: true
        order_placed_at:
          type: string
          format: date-time

    NextSteps:
      type: object
      properties:
        payment_url:
          type: string
          format: uri
        estimated_preparation_time_mins:
          type: integer
        estimated_delivery_time_mins:
          type: integer

    QuoteRequest:
      type: object
      properties:
        quotation_id:
          type: string
        customer_id:
          type: integer
        address:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        delivery_mode:
          type: integer
        order_mode:
          type: integer
        scheduled_for:
          type: string
          format: date-time
        payment_via:
          type: integer
        wallet_money:
          type: number
        loyalty_points:
          type: integer
        store_id:
          type: integer
        items:
          type: array
          items:
            type: object
            properties:
              item_id:
                type: integer
              quantity:
                type: integer
              total_amount:
                type: number
        flat_discount:
          type: number
        tips:
          type: number
        promo_code:
          type: string
        notes:
          type: string
        utensils:
          type: object
          properties:
            send_cutlery:
              type: boolean
            carry_bag:
              type: boolean
        expires_at:
          type: string
          format: date-time

    QuoteResponse:
      type: object
      properties:
        quotation_id:
          type: string
        customer_id:
          type: integer
        store_id:
          type: integer
        breakdown:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        is_used:
          type: boolean

    OrderItemRes:
      type: object
      properties:
        order_item_id:
          type: integer
        item_id:
          type: string
        quantity:
          type: integer
        mrp:
          type: number
        amount:
          type: number
        total_amount:
          type: number
        tax_amount:
          type: number
        discount_amount:
          type: number
        inventory_enabled:
          type: boolean
        notes:
          type: string

    EventsRes:
      type: object
      properties:
        event_id:
          type: integer
        order_id:
          type: integer
        status:
          type: string
        changed_by:
          type: integer
        actor_type:
          type: string
        update_source_id:
          type: integer
        changed_at:
          type: string
          format: date-time
        note:
          type: string
        is_active:
          type: boolean

    OrderDetailRes:
      type: object
      properties:
        id:
          type: integer
        order_id:
          type: string
        delivery_mode:
          type: integer
        delivery_mode_name:
          type: string
        order_status:
          type: integer
        orcder_status_name:
          type: string
        order_source:
          type: integer
        order_source_name:
          type: string
        cart_total:
          type: number
        delivery_charge:
          type: number
        total_discount:
          type: number
        schedule_for:
          type: string
          format: date-time
        placed_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        delivery_address:
          type: string
        client_request_id:
          type: string
        order_information:
          type: object
          additionalProperties: true
        customer_id:
          type: integer
        customer_name:
          type: string
        store_id:
          type: integer
        payment_mode:
          type: integer
        payment_mode_name:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRes'
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventsRes'

    UpdateOrderRequest:
      type: object
      properties:
        status:
          type: integer
        refund_amount:
          type: number
        metadata:
          type: object
          additionalProperties: true

    UpdateOrderResponse:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            order_id:
              type: string

paths:
  /api/v1/orders/health:
    post:
      summary: Check API health status
      operationId: checkHealth
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRequest'
      responses:
        '200': { description: Successful health check, content: { application/json: { schema: { $ref: '#/components/schemas/ApiResponse' } } } }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Internal server error }

  /api/v1/orders/quote:
    post:
      summary: Create or update a quote
      operationId: upsertQuote
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequest'
      responses:
        '200': { description: Quote created or updated, content: { application/json: { schema: { $ref: '#/components/schemas/ApiResponse' } } } }
        '400': { description: Invalid request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/v1/orders/list:
    post:
      summary: List orders
      operationId: listOrders
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOrdersRequest'
      responses:
        '200': { description: A list of orders and their summary, content: { application/json: { schema: { $ref: '#/components/schemas/ApiResponse' } } } }
        '400': { description: Invalid request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/v1/orders/create:
    post:
      summary: Create a new order
      operationId: createOrder
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200': { description: Order created successfully, content: { application/json: { schema: { $ref: '#/components/schemas/CreateOrderResponse' } } } }
        '400': { description: Invalid request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/v1/orders/{id}:
    get:
      summary: Get order details
      operationId: getOrderDetail
      tags: [Orders]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200': { description: Order details, content: { application/json: { schema: { $ref: '#/components/schemas/ApiResponse' } } } }
        '404': { description: Order not found }
        '400': { description: Invalid ID supplied }
        '401': { description: Unauthorized }

    post:
      summary: Update order
      operationId: updateOrder
      tags: [Orders]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200': { description: Order updated successfully, content: { application/json: { schema: { $ref: '#/components/schemas/UpdateOrderResponse' } } } }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
        '404': { description: Order not found }
        '500': { description: Server error }
